syntax = "proto3";
package v1;

option java_multiple_files = true;
option java_package = "sg.belive.lib.streaming.grpcChat";
option java_outer_classname = "BeliveRtmProtos";
enum AdminActionChannelEnum {
    ADMIN_ADD = 0;
    ADMIN_KICK = 1;
    ADMIN_MUTE = 2;
    ADMIN_UNMUTE = 3;
    ADMIN_BAN = 4;
    ADMIN_UNBAN = 5;
}

enum PeerToPeerActionEnum {
    USER_BLOCK = 0;
    USER_UNBLOCK = 1;
    USER_MUTE = 2;
    USER_UNMUTE = 3;
}

enum ChannelMessageTypeEnum {
    NORMAL_MESSAGE = 0;
    SUBSCRIBE_CHANNEL = 1; // Some one (client or admin or server) want send subscribe notify
    UNSUBSCRIBE_CHANNEL = 2;  // Some one (client or admin or server) want send unsubscribe notify
    START_CHAT = 3; // start the recording
    END_CHAT = 4; // stop the recording
    MUTE_USER = 5; // mute specific user, support for host only
    MUTE_USER_ALL  = 6;  // mute all user, support for host only
    CLEAR_CHAT_USER = 7;  // remove chat's in memory of  specific user, support for host only
    CLEAR_CHAT_ALL = 8;  // remove chat's in memory of  all user (keep host), support for host only
    CLEAR_RECORD_USER = 9;  // remove chat's history file of specific user, support for host only
    CLEAR_RECORD_ALL = 10;   // remove chat's history file of all user, support for host only
    STATISTIC = 11;   //maybe server will report statistic instead of host. but still thinking 
}

enum SubscribeChannelStatusEnum {
    SUBSCRIBE_CHANNEL_NOTFOUND = 0;
    SUBSCRIBE_SUCCESSFUL = 1;       
    SUBSCRIBE_FAILED = 2;
    SUBSCRIBE_IGNORED = 3;          // REQUIRE WAS IGNORE BY ADMIN
    SUBSCRIBE_REACH_LIMIT = 4;      // USER REACH MAXIMUM NUMBER CAN SUBSCRIBE
    SUBSCRIBE_REQUIRE_LOGIN = 5;    // CHANNEL REQUIRE USER LOGGED IN THEIR SYSTEM
    SUBSCRIBE_REQUIRE_PASSWORD = 6; // CHANNEL REQUIRE PASSWORD TO SUBSCRIBE
}

enum UnsubscribeChannelStatusEnum {
    UNSUBSCRIBE_CHANNEL_NOTFOUND = 0;
    UNSUBSCRIBE_SUCCESSFUL = 1;       
    UNSUBSCRIBE_FAILED = 2;
}

enum SendChannelMessageStatusEnum {
    SENDCHANNEL_CHANNEL_NOTFOUND = 0;   
    SENDCHANNEL_SUCCESSFUL = 1; 
    SENDCHANNEL_FAILED = 2; // GENERAL ERROR 
    SENDCHANNEL_IGNORE = 3; // USER HAS BANNED SEND
    SENDCHANNEL_REACH_LIMIT = 4; // USER HAS SEND MESSAGE REACH LIMITED
    SENDCHANNEL_REQUIRE_LOGIN = 5; // CHANNEL REQUIRE USER LOGGED IN THEIR SYSTEM
    SENDCHANNEL_REQUIRE_PASSWORD = 6; // CHANNEL NEED PASSWORD EVERY TIME
    SENDCHANNEL_REQUIRE_PERMISSION = 7; // USER HAVE TO IN SENDER GROUP 
}

enum SendPeerMessageStatusEnum {
    SENDPEER_RECEIVER_NOTFOUND = 0; // RECEIVER NOT FOUND
    SENDPEER_SUCCESSFUL = 1;
    SENDPEER_FAILED = 2;        
    SENDPEER_IGNORE = 3;        // RECEIVER BANNED SENDER
    SENDPEER_UNREACHABLE = 4;   // FOUND RECEIVER BUT SEEM THEY OFFLINE
}

enum ReleaseChannelStatusEnum {
    RELEASE_CHANNEL_NOTFOUND = 0;
    RELEASE_CHANNEL_SUCCESSFUL = 1;
    RELEASE_CHANNEL_FAILED = 2;
}

enum AdminActionChannelStatusEnum {
    ADMINACTION_UNKNOW = 0;
    ADMINACTION_SUCCESSFUL = 1;
    ADMINACTION_FAILED = 2;
}

enum PeerToPeerActionStatusEnum {
    PEERTOPEER_ACTION_UNKNOW = 0;
    PEERTOPEER_ACTION_SUCCESSFUL = 1;
    PEERTOPEER_ACTION_FAILED = 2;
}

enum LogInStatusEnum {
    LOGIN_UNKNOW = 0;
    LOGIN_SUCCESSFUL = 1;
    LOGIN_FAILED = 2;
}

enum LogOutStatusEnum {
    LOGOUT_UNKNOW = 0;
    LOGOUT_SUCCESSFUL = 1;
    LOGOUT_FAILED = 2;
}

enum UploadChatFileToS3StatusEnum {
    UPLOAD_UNKNOWN_CHANNEL = 0;
    UPLOAD_SUCCESSFUL = 1;
    UPLOAD_S3_DOMAIN_NOTFOUND = 2;
    UPLOAD_S3_ACCESSKEY_INVALID = 3;
    UPLOAD_S3_FOLDER_NOTFOUND = 4;
    UPLOAD_S3_FILENAME_INVALID = 5;
}




message RtmClient {
    int64 Id = 1;
    string AppId = 2;
    string SecretKey = 3;
    repeated string SubscribeChannel = 4;
    string ClientUniqueName = 5;
    repeated string BannedReceiver = 6;
    string AvatarUrl = 7;
    string DisplayName = 8;
}

message LiteUser {
    string UserName = 1;
    string AvatarUrl = 2;
    string AppId = 3;
    string UserDisplayName = 4;
}

message RtmMessage {
    string MessageContent = 1;
    string Sender = 2;
    int32 MessageType = 3;
    string SenderDisplayName = 4;
}

message LogInRequest {
    RtmClient RtmClient = 1;
}

message LogInResponse {
    LogInStatusEnum LogInStatus =  1;
    string token = 2;
}

message LogOutRequest {
    string UserName = 1;
}

message LogOutResponse {
    LogOutStatusEnum LogOutStatus = 1;
}

message SubcribeChannelRequest {
    string Channel = 1;
}

message SubcribeChannelResponse {
    SubscribeChannelStatusEnum SubscribeChannelStatus = 1;
}

message UnsubscribeChannelRequest {
    string Channel = 1;
}

message UnsubscribeChannelResponse {
    UnsubscribeChannelStatusEnum UnsubscribeChannelStatus = 1;
}

message SendPeerToPeerMessageRequest {
    RtmMessage RtmMessage = 1;
    string Receiver = 2;
}

message SendPeerToPeerMessageResponse {
    SendPeerMessageStatusEnum SendStatus = 1;
}

message SendChannelMessageRequest {
    RtmMessage RtmMessage = 1;
    ChannelMessageTypeEnum ChannelMessageType = 2;
    string Channel = 3;
}

message SendChannelMessageResponse {
    SendChannelMessageStatusEnum SendStatus = 1;
}

message ReleaseChannelRequest {
    string Channel = 2;
}

message ReleaseChannelResponse {
    ReleaseChannelStatusEnum ReleaseStatus = 1;
}

message AdminActionChannelRequest {
    AdminActionChannelEnum AdminActionChannel = 1;
}

message AdminActionChannelResponse {
    AdminActionChannelStatusEnum AdminActionChannelStatus = 1;
}

message PeerToPeerActionRequest {
    PeerToPeerActionEnum PeerToPeerAction = 1;
}

message PeerToPeerActionResponse {
    PeerToPeerActionStatusEnum PeerToPeerActionStatus = 1;
}



message ChannelStreamRequest {
    string Channel = 1;
    oneof Event {
        PingPong    ChannelStreamResponse_PingPong = 2;
        Message  ChannelStreamResponse_Message  = 3;
    }
    message PingPong {}
    message Message {
        string Sender    = 1;
        RtmMessage RtmMessage = 2;
        ChannelMessageTypeEnum ChannelMessageType = 3;
        int64 TimeSend = 4;
    }
}

message ChannelStreamResponse {
    string Channel = 1;
    
    oneof Event {
        PingPong    ChannelStreamResponse_PingPong = 2;
        Message  ChannelStreamResponse_Message  = 3;
        Shutdown ChannelStreamResponse_Shutdown = 4;
        Subscribe ChannelStreamResponse_Subscribe = 5;
        UnSubscribe ChannelStreamResponse_UnSubscribe = 6;
        Release ChannelStreamResponse_Release = 7;
    }

    message Message {
        string Sender    = 1;
        RtmMessage RtmMessage = 2;
        ChannelMessageTypeEnum ChannelMessageType = 3;
        int64 TimeSend = 4;
    }

    message Shutdown {}

    message Subscribe {
        string UserName = 1;
        int64 UserInChannelAmount = 2;
        string AvatarUrl = 3;
        string UserDisplayName = 4;
    }

    message UnSubscribe {
        string UserDisplayName = 1;
        string UserName = 2;
        int64 UserInChannelAmount = 3;
    }

    message Release {

    }

    message PingPong {}
}


message PeerStreamRequest {
    RtmMessage RtmMessage = 1;
    string Receiver = 2;
    oneof event {
        PingPong PeerStreamResponse_PingPong = 3;
    }
    message PingPong {

    }
}

message PeerStreamResponse {
    oneof event {
        PingPong PeerStreamResponse_PingPong = 1;
        AdminAction    PeerStreamResponse_AdminAction    = 2;
        PeerAction   PeerStreamResponse_PeerAction   = 3;
        Message  PeerStreamResponse_Message  = 4;
        Shutdown PeerStreamResponse_Shutdown = 5;
    }

    message AdminAction {
        AdminActionChannelEnum AdminActionChannelEnum = 1;
        string Message = 2;
    }

    message PeerAction {
        PeerToPeerActionEnum PeerToPeerActionEnum = 1;
        string Message = 2;
    }

    message Message {
        string sender    = 1;
        RtmMessage RtmMessage = 2;
    }

    message Shutdown {}
    message PingPong {}
}

message GetUsersInChannelRequest {
    string Channel = 1;
}

message GetUsersInChannelResponse {
    repeated LiteUser UserList = 1;
    string Channel = 2;
}

message GetUserAmountInChannelRequest {
    string Channel = 1;
}

message GetUserAmountInChannelResponse {
    int64 UserAmount = 1;
    string Channel = 2;
}

message UploadChatFileToS3Request {
    string Channel = 1;
    string S3Folder = 2;
    string FileNameWithExtension = 3;
    string S3ApiKey = 4;
    string S3ApiSecret = 5;
    string S3AceDomain = 6;
    string S3Domoain = 7;
}

message UploadChatFileToS3Response {
    UploadChatFileToS3StatusEnum UploadChatFileToS3Status = 1;
    string Message = 2;
}


service BeliveRtm {
    rpc LogIn(LogInRequest) returns (LogInResponse);
    rpc LogOut(LogOutRequest) returns (LogOutResponse);
    rpc GetUsersInChannel(GetUsersInChannelRequest) returns (GetUsersInChannelResponse);
    rpc GetUserAmountInChannel(GetUserAmountInChannelRequest) returns (GetUserAmountInChannelResponse);
    rpc UploadChatFileToS3(UploadChatFileToS3Request) returns (UploadChatFileToS3Response);
    rpc SubcribeChannel(SubcribeChannelRequest) returns (SubcribeChannelResponse);
    rpc UnsubscribeChannel(UnsubscribeChannelRequest) returns (UnsubscribeChannelResponse);
    rpc SendPeerToPeerMessage(SendPeerToPeerMessageRequest) returns (SendPeerToPeerMessageResponse);
    rpc SendChannelMessage(SendChannelMessageRequest) returns (SendChannelMessageResponse);
    rpc ReleaseChannel(ReleaseChannelRequest) returns (ReleaseChannelResponse);
    rpc AdminActionChannel(AdminActionChannelRequest) returns (AdminActionChannelResponse);
    rpc PeerToPeerAction(PeerToPeerActionRequest) returns (PeerToPeerActionResponse);
    rpc ChannelStream( ChannelStreamRequest) returns (stream ChannelStreamResponse);
    rpc PeerToPeerStream( PeerStreamRequest) returns (stream PeerStreamResponse);
}