// source: BeliveRTM.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.v1.AdminActionChannelEnum", null, global);
goog.exportSymbol("proto.v1.AdminActionChannelRequest", null, global);
goog.exportSymbol("proto.v1.AdminActionChannelResponse", null, global);
goog.exportSymbol("proto.v1.AdminActionChannelStatusEnum", null, global);
goog.exportSymbol("proto.v1.ChannelMessageTypeEnum", null, global);
goog.exportSymbol("proto.v1.ChannelStreamRequest", null, global);
goog.exportSymbol("proto.v1.ChannelStreamRequest.EventCase", null, global);
goog.exportSymbol("proto.v1.ChannelStreamRequest.Message", null, global);
goog.exportSymbol("proto.v1.ChannelStreamRequest.PingPong", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.EventCase", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.Message", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.PingPong", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.Release", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.Shutdown", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.Subscribe", null, global);
goog.exportSymbol("proto.v1.ChannelStreamResponse.UnSubscribe", null, global);
goog.exportSymbol("proto.v1.GetUserAmountInChannelRequest", null, global);
goog.exportSymbol("proto.v1.GetUserAmountInChannelResponse", null, global);
goog.exportSymbol("proto.v1.GetUsersInChannelRequest", null, global);
goog.exportSymbol("proto.v1.GetUsersInChannelResponse", null, global);
goog.exportSymbol("proto.v1.LiteUser", null, global);
goog.exportSymbol("proto.v1.LogInRequest", null, global);
goog.exportSymbol("proto.v1.LogInResponse", null, global);
goog.exportSymbol("proto.v1.LogInStatusEnum", null, global);
goog.exportSymbol("proto.v1.LogOutRequest", null, global);
goog.exportSymbol("proto.v1.LogOutResponse", null, global);
goog.exportSymbol("proto.v1.LogOutStatusEnum", null, global);
goog.exportSymbol("proto.v1.PeerStreamRequest", null, global);
goog.exportSymbol("proto.v1.PeerStreamRequest.EventCase", null, global);
goog.exportSymbol("proto.v1.PeerStreamRequest.PingPong", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.AdminAction", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.EventCase", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.Message", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.PeerAction", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.PingPong", null, global);
goog.exportSymbol("proto.v1.PeerStreamResponse.Shutdown", null, global);
goog.exportSymbol("proto.v1.PeerToPeerActionEnum", null, global);
goog.exportSymbol("proto.v1.PeerToPeerActionRequest", null, global);
goog.exportSymbol("proto.v1.PeerToPeerActionResponse", null, global);
goog.exportSymbol("proto.v1.PeerToPeerActionStatusEnum", null, global);
goog.exportSymbol("proto.v1.ReleaseChannelRequest", null, global);
goog.exportSymbol("proto.v1.ReleaseChannelResponse", null, global);
goog.exportSymbol("proto.v1.ReleaseChannelStatusEnum", null, global);
goog.exportSymbol("proto.v1.RtmClient", null, global);
goog.exportSymbol("proto.v1.RtmMessage", null, global);
goog.exportSymbol("proto.v1.SendChannelMessageRequest", null, global);
goog.exportSymbol("proto.v1.SendChannelMessageResponse", null, global);
goog.exportSymbol("proto.v1.SendChannelMessageStatusEnum", null, global);
goog.exportSymbol("proto.v1.SendPeerMessageStatusEnum", null, global);
goog.exportSymbol("proto.v1.SendPeerToPeerMessageRequest", null, global);
goog.exportSymbol("proto.v1.SendPeerToPeerMessageResponse", null, global);
goog.exportSymbol("proto.v1.SubcribeChannelRequest", null, global);
goog.exportSymbol("proto.v1.SubcribeChannelResponse", null, global);
goog.exportSymbol("proto.v1.SubscribeChannelStatusEnum", null, global);
goog.exportSymbol("proto.v1.UnsubscribeChannelRequest", null, global);
goog.exportSymbol("proto.v1.UnsubscribeChannelResponse", null, global);
goog.exportSymbol("proto.v1.UnsubscribeChannelStatusEnum", null, global);
goog.exportSymbol("proto.v1.UploadChatFileToS3Request", null, global);
goog.exportSymbol("proto.v1.UploadChatFileToS3Response", null, global);
goog.exportSymbol("proto.v1.UploadChatFileToS3StatusEnum", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RtmClient = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.v1.RtmClient.repeatedFields_,
		null
	);
};
goog.inherits(proto.v1.RtmClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.RtmClient.displayName = "proto.v1.RtmClient";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LiteUser = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LiteUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.LiteUser.displayName = "proto.v1.LiteUser";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.RtmMessage = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.RtmMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.RtmMessage.displayName = "proto.v1.RtmMessage";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LogInRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LogInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.LogInRequest.displayName = "proto.v1.LogInRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LogInResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LogInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.LogInResponse.displayName = "proto.v1.LogInResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LogOutRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LogOutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.LogOutRequest.displayName = "proto.v1.LogOutRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LogOutResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LogOutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.LogOutResponse.displayName = "proto.v1.LogOutResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SubcribeChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SubcribeChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SubcribeChannelRequest.displayName =
		"proto.v1.SubcribeChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SubcribeChannelResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SubcribeChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SubcribeChannelResponse.displayName =
		"proto.v1.SubcribeChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UnsubscribeChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UnsubscribeChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.UnsubscribeChannelRequest.displayName =
		"proto.v1.UnsubscribeChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UnsubscribeChannelResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UnsubscribeChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.UnsubscribeChannelResponse.displayName =
		"proto.v1.UnsubscribeChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SendPeerToPeerMessageRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SendPeerToPeerMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SendPeerToPeerMessageRequest.displayName =
		"proto.v1.SendPeerToPeerMessageRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SendPeerToPeerMessageResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SendPeerToPeerMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SendPeerToPeerMessageResponse.displayName =
		"proto.v1.SendPeerToPeerMessageResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SendChannelMessageRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SendChannelMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SendChannelMessageRequest.displayName =
		"proto.v1.SendChannelMessageRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.SendChannelMessageResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.SendChannelMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.SendChannelMessageResponse.displayName =
		"proto.v1.SendChannelMessageResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ReleaseChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ReleaseChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ReleaseChannelRequest.displayName = "proto.v1.ReleaseChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ReleaseChannelResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ReleaseChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ReleaseChannelResponse.displayName =
		"proto.v1.ReleaseChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.AdminActionChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.AdminActionChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.AdminActionChannelRequest.displayName =
		"proto.v1.AdminActionChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.AdminActionChannelResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.AdminActionChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.AdminActionChannelResponse.displayName =
		"proto.v1.AdminActionChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerToPeerActionRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerToPeerActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerToPeerActionRequest.displayName =
		"proto.v1.PeerToPeerActionRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerToPeerActionResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerToPeerActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerToPeerActionResponse.displayName =
		"proto.v1.PeerToPeerActionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamRequest = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.v1.ChannelStreamRequest.oneofGroups_
	);
};
goog.inherits(proto.v1.ChannelStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamRequest.displayName = "proto.v1.ChannelStreamRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamRequest.PingPong = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamRequest.PingPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamRequest.PingPong.displayName =
		"proto.v1.ChannelStreamRequest.PingPong";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamRequest.Message = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamRequest.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamRequest.Message.displayName =
		"proto.v1.ChannelStreamRequest.Message";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.v1.ChannelStreamResponse.oneofGroups_
	);
};
goog.inherits(proto.v1.ChannelStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.displayName = "proto.v1.ChannelStreamResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.Message = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.Message.displayName =
		"proto.v1.ChannelStreamResponse.Message";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.Shutdown = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.Shutdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.Shutdown.displayName =
		"proto.v1.ChannelStreamResponse.Shutdown";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.Subscribe = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.Subscribe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.Subscribe.displayName =
		"proto.v1.ChannelStreamResponse.Subscribe";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.UnSubscribe = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.UnSubscribe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.UnSubscribe.displayName =
		"proto.v1.ChannelStreamResponse.UnSubscribe";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.Release = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.Release, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.Release.displayName =
		"proto.v1.ChannelStreamResponse.Release";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ChannelStreamResponse.PingPong = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ChannelStreamResponse.PingPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.ChannelStreamResponse.PingPong.displayName =
		"proto.v1.ChannelStreamResponse.PingPong";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamRequest = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.v1.PeerStreamRequest.oneofGroups_
	);
};
goog.inherits(proto.v1.PeerStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamRequest.displayName = "proto.v1.PeerStreamRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamRequest.PingPong = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamRequest.PingPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamRequest.PingPong.displayName =
		"proto.v1.PeerStreamRequest.PingPong";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.v1.PeerStreamResponse.oneofGroups_
	);
};
goog.inherits(proto.v1.PeerStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.displayName = "proto.v1.PeerStreamResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse.AdminAction = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamResponse.AdminAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.AdminAction.displayName =
		"proto.v1.PeerStreamResponse.AdminAction";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse.PeerAction = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamResponse.PeerAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.PeerAction.displayName =
		"proto.v1.PeerStreamResponse.PeerAction";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse.Message = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamResponse.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.Message.displayName =
		"proto.v1.PeerStreamResponse.Message";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse.Shutdown = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamResponse.Shutdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.Shutdown.displayName =
		"proto.v1.PeerStreamResponse.Shutdown";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PeerStreamResponse.PingPong = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PeerStreamResponse.PingPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.PeerStreamResponse.PingPong.displayName =
		"proto.v1.PeerStreamResponse.PingPong";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetUsersInChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.GetUsersInChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.GetUsersInChannelRequest.displayName =
		"proto.v1.GetUsersInChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetUsersInChannelResponse = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.v1.GetUsersInChannelResponse.repeatedFields_,
		null
	);
};
goog.inherits(proto.v1.GetUsersInChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.GetUsersInChannelResponse.displayName =
		"proto.v1.GetUsersInChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetUserAmountInChannelRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.GetUserAmountInChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.GetUserAmountInChannelRequest.displayName =
		"proto.v1.GetUserAmountInChannelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetUserAmountInChannelResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.GetUserAmountInChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.GetUserAmountInChannelResponse.displayName =
		"proto.v1.GetUserAmountInChannelResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UploadChatFileToS3Request = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UploadChatFileToS3Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.UploadChatFileToS3Request.displayName =
		"proto.v1.UploadChatFileToS3Request";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UploadChatFileToS3Response = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UploadChatFileToS3Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.v1.UploadChatFileToS3Response.displayName =
		"proto.v1.UploadChatFileToS3Response";
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.RtmClient.repeatedFields_ = [4, 6];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.RtmClient.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.RtmClient.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.RtmClient} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.RtmClient.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				id: jspb.Message.getFieldWithDefault(msg, 1, 0),
				appid: jspb.Message.getFieldWithDefault(msg, 2, ""),
				secretkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
				subscribechannelList:
					(f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
				clientuniquename: jspb.Message.getFieldWithDefault(msg, 5, ""),
				bannedreceiverList:
					(f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
				avatarurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
				displayname: jspb.Message.getFieldWithDefault(msg, 8, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RtmClient}
 */
proto.v1.RtmClient.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.RtmClient();
	return proto.v1.RtmClient.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RtmClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RtmClient}
 */
proto.v1.RtmClient.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setAppid(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setSecretkey(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.addSubscribechannel(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setClientuniquename(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.addBannedreceiver(value);
				break;
			case 7:
				var value = /** @type {string} */ (reader.readString());
				msg.setAvatarurl(value);
				break;
			case 8:
				var value = /** @type {string} */ (reader.readString());
				msg.setDisplayname(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RtmClient.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.RtmClient.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RtmClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RtmClient.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getId();
	if (f !== 0) {
		writer.writeInt64(1, f);
	}
	f = message.getAppid();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getSecretkey();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getSubscribechannelList();
	if (f.length > 0) {
		writer.writeRepeatedString(4, f);
	}
	f = message.getClientuniquename();
	if (f.length > 0) {
		writer.writeString(5, f);
	}
	f = message.getBannedreceiverList();
	if (f.length > 0) {
		writer.writeRepeatedString(6, f);
	}
	f = message.getAvatarurl();
	if (f.length > 0) {
		writer.writeString(7, f);
	}
	f = message.getDisplayname();
	if (f.length > 0) {
		writer.writeString(8, f);
	}
};

/**
 * optional int64 Id = 1;
 * @return {number}
 */
proto.v1.RtmClient.prototype.getId = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setId = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string AppId = 2;
 * @return {string}
 */
proto.v1.RtmClient.prototype.getAppid = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setAppid = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string SecretKey = 3;
 * @return {string}
 */
proto.v1.RtmClient.prototype.getSecretkey = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setSecretkey = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * repeated string SubscribeChannel = 4;
 * @return {!Array<string>}
 */
proto.v1.RtmClient.prototype.getSubscribechannelList = function () {
	return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setSubscribechannelList = function (value) {
	return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.addSubscribechannel = function (value, opt_index) {
	return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.clearSubscribechannelList = function () {
	return this.setSubscribechannelList([]);
};

/**
 * optional string ClientUniqueName = 5;
 * @return {string}
 */
proto.v1.RtmClient.prototype.getClientuniquename = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setClientuniquename = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * repeated string BannedReceiver = 6;
 * @return {!Array<string>}
 */
proto.v1.RtmClient.prototype.getBannedreceiverList = function () {
	return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setBannedreceiverList = function (value) {
	return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.addBannedreceiver = function (value, opt_index) {
	return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.clearBannedreceiverList = function () {
	return this.setBannedreceiverList([]);
};

/**
 * optional string AvatarUrl = 7;
 * @return {string}
 */
proto.v1.RtmClient.prototype.getAvatarurl = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setAvatarurl = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string DisplayName = 8;
 * @return {string}
 */
proto.v1.RtmClient.prototype.getDisplayname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmClient} returns this
 */
proto.v1.RtmClient.prototype.setDisplayname = function (value) {
	return jspb.Message.setProto3StringField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.LiteUser.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.LiteUser.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.LiteUser} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.LiteUser.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				username: jspb.Message.getFieldWithDefault(msg, 1, ""),
				avatarurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
				appid: jspb.Message.getFieldWithDefault(msg, 3, ""),
				userdisplayname: jspb.Message.getFieldWithDefault(msg, 4, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LiteUser}
 */
proto.v1.LiteUser.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.LiteUser();
	return proto.v1.LiteUser.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LiteUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LiteUser}
 */
proto.v1.LiteUser.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setUsername(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setAvatarurl(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setAppid(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setUserdisplayname(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LiteUser.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.LiteUser.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LiteUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LiteUser.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getUsername();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getAvatarurl();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getAppid();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getUserdisplayname();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional string UserName = 1;
 * @return {string}
 */
proto.v1.LiteUser.prototype.getUsername = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LiteUser} returns this
 */
proto.v1.LiteUser.prototype.setUsername = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string AvatarUrl = 2;
 * @return {string}
 */
proto.v1.LiteUser.prototype.getAvatarurl = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LiteUser} returns this
 */
proto.v1.LiteUser.prototype.setAvatarurl = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string AppId = 3;
 * @return {string}
 */
proto.v1.LiteUser.prototype.getAppid = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LiteUser} returns this
 */
proto.v1.LiteUser.prototype.setAppid = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string UserDisplayName = 4;
 * @return {string}
 */
proto.v1.LiteUser.prototype.getUserdisplayname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LiteUser} returns this
 */
proto.v1.LiteUser.prototype.setUserdisplayname = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.RtmMessage.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.RtmMessage.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.RtmMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.RtmMessage.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				messagecontent: jspb.Message.getFieldWithDefault(msg, 1, ""),
				sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
				messagetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
				senderdisplayname: jspb.Message.getFieldWithDefault(msg, 4, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.RtmMessage}
 */
proto.v1.RtmMessage.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.RtmMessage();
	return proto.v1.RtmMessage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.RtmMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.RtmMessage}
 */
proto.v1.RtmMessage.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessagecontent(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setSender(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setMessagetype(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setSenderdisplayname(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.RtmMessage.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.RtmMessage.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.RtmMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.RtmMessage.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getMessagecontent();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getSender();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getMessagetype();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
	f = message.getSenderdisplayname();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional string MessageContent = 1;
 * @return {string}
 */
proto.v1.RtmMessage.prototype.getMessagecontent = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmMessage} returns this
 */
proto.v1.RtmMessage.prototype.setMessagecontent = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string Sender = 2;
 * @return {string}
 */
proto.v1.RtmMessage.prototype.getSender = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmMessage} returns this
 */
proto.v1.RtmMessage.prototype.setSender = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 MessageType = 3;
 * @return {number}
 */
proto.v1.RtmMessage.prototype.getMessagetype = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.RtmMessage} returns this
 */
proto.v1.RtmMessage.prototype.setMessagetype = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string SenderDisplayName = 4;
 * @return {string}
 */
proto.v1.RtmMessage.prototype.getSenderdisplayname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.RtmMessage} returns this
 */
proto.v1.RtmMessage.prototype.setSenderdisplayname = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.LogInRequest.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.LogInRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.LogInRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.LogInRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rtmclient:
					(f = msg.getRtmclient()) &&
					proto.v1.RtmClient.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LogInRequest}
 */
proto.v1.LogInRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.LogInRequest();
	return proto.v1.LogInRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LogInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LogInRequest}
 */
proto.v1.LogInRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.RtmClient();
				reader.readMessage(
					value,
					proto.v1.RtmClient.deserializeBinaryFromReader
				);
				msg.setRtmclient(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LogInRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.LogInRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LogInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LogInRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getRtmclient();
	if (f != null) {
		writer.writeMessage(1, f, proto.v1.RtmClient.serializeBinaryToWriter);
	}
};

/**
 * optional RtmClient RtmClient = 1;
 * @return {?proto.v1.RtmClient}
 */
proto.v1.LogInRequest.prototype.getRtmclient = function () {
	return /** @type{?proto.v1.RtmClient} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmClient,
		1
	));
};

/**
 * @param {?proto.v1.RtmClient|undefined} value
 * @return {!proto.v1.LogInRequest} returns this
 */
proto.v1.LogInRequest.prototype.setRtmclient = function (value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.LogInRequest} returns this
 */
proto.v1.LogInRequest.prototype.clearRtmclient = function () {
	return this.setRtmclient(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.LogInRequest.prototype.hasRtmclient = function () {
	return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.LogInResponse.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.LogInResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.LogInResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.LogInResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				loginstatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
				token: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LogInResponse}
 */
proto.v1.LogInResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.LogInResponse();
	return proto.v1.LogInResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LogInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LogInResponse}
 */
proto.v1.LogInResponse.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.LogInStatusEnum} */ (reader.readEnum());
				msg.setLoginstatus(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LogInResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.LogInResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LogInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LogInResponse.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getLoginstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
	f = message.getToken();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional LogInStatusEnum LogInStatus = 1;
 * @return {!proto.v1.LogInStatusEnum}
 */
proto.v1.LogInResponse.prototype.getLoginstatus = function () {
	return /** @type {!proto.v1.LogInStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.LogInStatusEnum} value
 * @return {!proto.v1.LogInResponse} returns this
 */
proto.v1.LogInResponse.prototype.setLoginstatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string token = 2;
 * @return {string}
 */
proto.v1.LogInResponse.prototype.getToken = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LogInResponse} returns this
 */
proto.v1.LogInResponse.prototype.setToken = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.LogOutRequest.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.LogOutRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.LogOutRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.LogOutRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				username: jspb.Message.getFieldWithDefault(msg, 1, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LogOutRequest}
 */
proto.v1.LogOutRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.LogOutRequest();
	return proto.v1.LogOutRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LogOutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LogOutRequest}
 */
proto.v1.LogOutRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setUsername(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LogOutRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.LogOutRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LogOutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LogOutRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getUsername();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string UserName = 1;
 * @return {string}
 */
proto.v1.LogOutRequest.prototype.getUsername = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.LogOutRequest} returns this
 */
proto.v1.LogOutRequest.prototype.setUsername = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.LogOutResponse.prototype.toObject = function (opt_includeInstance) {
		return proto.v1.LogOutResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.LogOutResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.LogOutResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				logoutstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LogOutResponse}
 */
proto.v1.LogOutResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.LogOutResponse();
	return proto.v1.LogOutResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LogOutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LogOutResponse}
 */
proto.v1.LogOutResponse.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.LogOutStatusEnum} */ (reader.readEnum());
				msg.setLogoutstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LogOutResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.LogOutResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LogOutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LogOutResponse.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getLogoutstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional LogOutStatusEnum LogOutStatus = 1;
 * @return {!proto.v1.LogOutStatusEnum}
 */
proto.v1.LogOutResponse.prototype.getLogoutstatus = function () {
	return /** @type {!proto.v1.LogOutStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.LogOutStatusEnum} value
 * @return {!proto.v1.LogOutResponse} returns this
 */
proto.v1.LogOutResponse.prototype.setLogoutstatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SubcribeChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SubcribeChannelRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SubcribeChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SubcribeChannelRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SubcribeChannelRequest}
 */
proto.v1.SubcribeChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SubcribeChannelRequest();
	return proto.v1.SubcribeChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SubcribeChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SubcribeChannelRequest}
 */
proto.v1.SubcribeChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SubcribeChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SubcribeChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SubcribeChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SubcribeChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.SubcribeChannelRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.SubcribeChannelRequest} returns this
 */
proto.v1.SubcribeChannelRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SubcribeChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SubcribeChannelResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SubcribeChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SubcribeChannelResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				subscribechannelstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SubcribeChannelResponse}
 */
proto.v1.SubcribeChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SubcribeChannelResponse();
	return proto.v1.SubcribeChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SubcribeChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SubcribeChannelResponse}
 */
proto.v1.SubcribeChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.SubscribeChannelStatusEnum} */ (reader.readEnum());
				msg.setSubscribechannelstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SubcribeChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SubcribeChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SubcribeChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SubcribeChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSubscribechannelstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional SubscribeChannelStatusEnum SubscribeChannelStatus = 1;
 * @return {!proto.v1.SubscribeChannelStatusEnum}
 */
proto.v1.SubcribeChannelResponse.prototype.getSubscribechannelstatus = function () {
	return /** @type {!proto.v1.SubscribeChannelStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.SubscribeChannelStatusEnum} value
 * @return {!proto.v1.SubcribeChannelResponse} returns this
 */
proto.v1.SubcribeChannelResponse.prototype.setSubscribechannelstatus = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.UnsubscribeChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.UnsubscribeChannelRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.UnsubscribeChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.UnsubscribeChannelRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UnsubscribeChannelRequest}
 */
proto.v1.UnsubscribeChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.UnsubscribeChannelRequest();
	return proto.v1.UnsubscribeChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UnsubscribeChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UnsubscribeChannelRequest}
 */
proto.v1.UnsubscribeChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UnsubscribeChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.UnsubscribeChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UnsubscribeChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UnsubscribeChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.UnsubscribeChannelRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UnsubscribeChannelRequest} returns this
 */
proto.v1.UnsubscribeChannelRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.UnsubscribeChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.UnsubscribeChannelResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.UnsubscribeChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.UnsubscribeChannelResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				unsubscribechannelstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UnsubscribeChannelResponse}
 */
proto.v1.UnsubscribeChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.UnsubscribeChannelResponse();
	return proto.v1.UnsubscribeChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UnsubscribeChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UnsubscribeChannelResponse}
 */
proto.v1.UnsubscribeChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.UnsubscribeChannelStatusEnum} */ (reader.readEnum());
				msg.setUnsubscribechannelstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UnsubscribeChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.UnsubscribeChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UnsubscribeChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UnsubscribeChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUnsubscribechannelstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional UnsubscribeChannelStatusEnum UnsubscribeChannelStatus = 1;
 * @return {!proto.v1.UnsubscribeChannelStatusEnum}
 */
proto.v1.UnsubscribeChannelResponse.prototype.getUnsubscribechannelstatus = function () {
	return /** @type {!proto.v1.UnsubscribeChannelStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.UnsubscribeChannelStatusEnum} value
 * @return {!proto.v1.UnsubscribeChannelResponse} returns this
 */
proto.v1.UnsubscribeChannelResponse.prototype.setUnsubscribechannelstatus = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SendPeerToPeerMessageRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SendPeerToPeerMessageRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SendPeerToPeerMessageRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SendPeerToPeerMessageRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f),
				receiver: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SendPeerToPeerMessageRequest}
 */
proto.v1.SendPeerToPeerMessageRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SendPeerToPeerMessageRequest();
	return proto.v1.SendPeerToPeerMessageRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SendPeerToPeerMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SendPeerToPeerMessageRequest}
 */
proto.v1.SendPeerToPeerMessageRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setReceiver(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SendPeerToPeerMessageRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SendPeerToPeerMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SendPeerToPeerMessageRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(1, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
	f = message.getReceiver();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional RtmMessage RtmMessage = 1;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		1
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.SendPeerToPeerMessageRequest} returns this
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.setRtmmessage = function (
	value
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.SendPeerToPeerMessageRequest} returns this
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string Receiver = 2;
 * @return {string}
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.getReceiver = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.SendPeerToPeerMessageRequest} returns this
 */
proto.v1.SendPeerToPeerMessageRequest.prototype.setReceiver = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SendPeerToPeerMessageResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SendPeerToPeerMessageResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SendPeerToPeerMessageResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SendPeerToPeerMessageResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				sendstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SendPeerToPeerMessageResponse}
 */
proto.v1.SendPeerToPeerMessageResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SendPeerToPeerMessageResponse();
	return proto.v1.SendPeerToPeerMessageResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SendPeerToPeerMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SendPeerToPeerMessageResponse}
 */
proto.v1.SendPeerToPeerMessageResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.SendPeerMessageStatusEnum} */ (reader.readEnum());
				msg.setSendstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SendPeerToPeerMessageResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SendPeerToPeerMessageResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SendPeerToPeerMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SendPeerToPeerMessageResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSendstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional SendPeerMessageStatusEnum SendStatus = 1;
 * @return {!proto.v1.SendPeerMessageStatusEnum}
 */
proto.v1.SendPeerToPeerMessageResponse.prototype.getSendstatus = function () {
	return /** @type {!proto.v1.SendPeerMessageStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.SendPeerMessageStatusEnum} value
 * @return {!proto.v1.SendPeerToPeerMessageResponse} returns this
 */
proto.v1.SendPeerToPeerMessageResponse.prototype.setSendstatus = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SendChannelMessageRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SendChannelMessageRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SendChannelMessageRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SendChannelMessageRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f),
				channelmessagetype: jspb.Message.getFieldWithDefault(msg, 2, 0),
				channel: jspb.Message.getFieldWithDefault(msg, 3, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SendChannelMessageRequest}
 */
proto.v1.SendChannelMessageRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SendChannelMessageRequest();
	return proto.v1.SendChannelMessageRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SendChannelMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SendChannelMessageRequest}
 */
proto.v1.SendChannelMessageRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			case 2:
				var value = /** @type {!proto.v1.ChannelMessageTypeEnum} */ (reader.readEnum());
				msg.setChannelmessagetype(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SendChannelMessageRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SendChannelMessageRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SendChannelMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SendChannelMessageRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(1, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
	f = message.getChannelmessagetype();
	if (f !== 0.0) {
		writer.writeEnum(2, f);
	}
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
};

/**
 * optional RtmMessage RtmMessage = 1;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.SendChannelMessageRequest.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		1
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.SendChannelMessageRequest} returns this
 */
proto.v1.SendChannelMessageRequest.prototype.setRtmmessage = function (value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.SendChannelMessageRequest} returns this
 */
proto.v1.SendChannelMessageRequest.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.SendChannelMessageRequest.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional ChannelMessageTypeEnum ChannelMessageType = 2;
 * @return {!proto.v1.ChannelMessageTypeEnum}
 */
proto.v1.SendChannelMessageRequest.prototype.getChannelmessagetype = function () {
	return /** @type {!proto.v1.ChannelMessageTypeEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		0
	));
};

/**
 * @param {!proto.v1.ChannelMessageTypeEnum} value
 * @return {!proto.v1.SendChannelMessageRequest} returns this
 */
proto.v1.SendChannelMessageRequest.prototype.setChannelmessagetype = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional string Channel = 3;
 * @return {string}
 */
proto.v1.SendChannelMessageRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.SendChannelMessageRequest} returns this
 */
proto.v1.SendChannelMessageRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.SendChannelMessageResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.SendChannelMessageResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.SendChannelMessageResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.SendChannelMessageResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				sendstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.SendChannelMessageResponse}
 */
proto.v1.SendChannelMessageResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.SendChannelMessageResponse();
	return proto.v1.SendChannelMessageResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.SendChannelMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.SendChannelMessageResponse}
 */
proto.v1.SendChannelMessageResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.SendChannelMessageStatusEnum} */ (reader.readEnum());
				msg.setSendstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.SendChannelMessageResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.SendChannelMessageResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.SendChannelMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.SendChannelMessageResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSendstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional SendChannelMessageStatusEnum SendStatus = 1;
 * @return {!proto.v1.SendChannelMessageStatusEnum}
 */
proto.v1.SendChannelMessageResponse.prototype.getSendstatus = function () {
	return /** @type {!proto.v1.SendChannelMessageStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.SendChannelMessageStatusEnum} value
 * @return {!proto.v1.SendChannelMessageResponse} returns this
 */
proto.v1.SendChannelMessageResponse.prototype.setSendstatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ReleaseChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ReleaseChannelRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ReleaseChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ReleaseChannelRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ReleaseChannelRequest}
 */
proto.v1.ReleaseChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ReleaseChannelRequest();
	return proto.v1.ReleaseChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ReleaseChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ReleaseChannelRequest}
 */
proto.v1.ReleaseChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ReleaseChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ReleaseChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ReleaseChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ReleaseChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional string Channel = 2;
 * @return {string}
 */
proto.v1.ReleaseChannelRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ReleaseChannelRequest} returns this
 */
proto.v1.ReleaseChannelRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ReleaseChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ReleaseChannelResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ReleaseChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ReleaseChannelResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				releasestatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ReleaseChannelResponse}
 */
proto.v1.ReleaseChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ReleaseChannelResponse();
	return proto.v1.ReleaseChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ReleaseChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ReleaseChannelResponse}
 */
proto.v1.ReleaseChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.ReleaseChannelStatusEnum} */ (reader.readEnum());
				msg.setReleasestatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ReleaseChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ReleaseChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ReleaseChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ReleaseChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getReleasestatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional ReleaseChannelStatusEnum ReleaseStatus = 1;
 * @return {!proto.v1.ReleaseChannelStatusEnum}
 */
proto.v1.ReleaseChannelResponse.prototype.getReleasestatus = function () {
	return /** @type {!proto.v1.ReleaseChannelStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.ReleaseChannelStatusEnum} value
 * @return {!proto.v1.ReleaseChannelResponse} returns this
 */
proto.v1.ReleaseChannelResponse.prototype.setReleasestatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.AdminActionChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.AdminActionChannelRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.AdminActionChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.AdminActionChannelRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				adminactionchannel: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.AdminActionChannelRequest}
 */
proto.v1.AdminActionChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.AdminActionChannelRequest();
	return proto.v1.AdminActionChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.AdminActionChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.AdminActionChannelRequest}
 */
proto.v1.AdminActionChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.AdminActionChannelEnum} */ (reader.readEnum());
				msg.setAdminactionchannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.AdminActionChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.AdminActionChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.AdminActionChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.AdminActionChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getAdminactionchannel();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional AdminActionChannelEnum AdminActionChannel = 1;
 * @return {!proto.v1.AdminActionChannelEnum}
 */
proto.v1.AdminActionChannelRequest.prototype.getAdminactionchannel = function () {
	return /** @type {!proto.v1.AdminActionChannelEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.AdminActionChannelEnum} value
 * @return {!proto.v1.AdminActionChannelRequest} returns this
 */
proto.v1.AdminActionChannelRequest.prototype.setAdminactionchannel = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.AdminActionChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.AdminActionChannelResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.AdminActionChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.AdminActionChannelResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				adminactionchannelstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.AdminActionChannelResponse}
 */
proto.v1.AdminActionChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.AdminActionChannelResponse();
	return proto.v1.AdminActionChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.AdminActionChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.AdminActionChannelResponse}
 */
proto.v1.AdminActionChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.AdminActionChannelStatusEnum} */ (reader.readEnum());
				msg.setAdminactionchannelstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.AdminActionChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.AdminActionChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.AdminActionChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.AdminActionChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getAdminactionchannelstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional AdminActionChannelStatusEnum AdminActionChannelStatus = 1;
 * @return {!proto.v1.AdminActionChannelStatusEnum}
 */
proto.v1.AdminActionChannelResponse.prototype.getAdminactionchannelstatus = function () {
	return /** @type {!proto.v1.AdminActionChannelStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.AdminActionChannelStatusEnum} value
 * @return {!proto.v1.AdminActionChannelResponse} returns this
 */
proto.v1.AdminActionChannelResponse.prototype.setAdminactionchannelstatus = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerToPeerActionRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerToPeerActionRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerToPeerActionRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerToPeerActionRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				peertopeeraction: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerToPeerActionRequest}
 */
proto.v1.PeerToPeerActionRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerToPeerActionRequest();
	return proto.v1.PeerToPeerActionRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerToPeerActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerToPeerActionRequest}
 */
proto.v1.PeerToPeerActionRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.PeerToPeerActionEnum} */ (reader.readEnum());
				msg.setPeertopeeraction(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerToPeerActionRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerToPeerActionRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerToPeerActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerToPeerActionRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getPeertopeeraction();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional PeerToPeerActionEnum PeerToPeerAction = 1;
 * @return {!proto.v1.PeerToPeerActionEnum}
 */
proto.v1.PeerToPeerActionRequest.prototype.getPeertopeeraction = function () {
	return /** @type {!proto.v1.PeerToPeerActionEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.PeerToPeerActionEnum} value
 * @return {!proto.v1.PeerToPeerActionRequest} returns this
 */
proto.v1.PeerToPeerActionRequest.prototype.setPeertopeeraction = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerToPeerActionResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerToPeerActionResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerToPeerActionResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerToPeerActionResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				peertopeeractionstatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerToPeerActionResponse}
 */
proto.v1.PeerToPeerActionResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerToPeerActionResponse();
	return proto.v1.PeerToPeerActionResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerToPeerActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerToPeerActionResponse}
 */
proto.v1.PeerToPeerActionResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.PeerToPeerActionStatusEnum} */ (reader.readEnum());
				msg.setPeertopeeractionstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerToPeerActionResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerToPeerActionResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerToPeerActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerToPeerActionResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getPeertopeeractionstatus();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
};

/**
 * optional PeerToPeerActionStatusEnum PeerToPeerActionStatus = 1;
 * @return {!proto.v1.PeerToPeerActionStatusEnum}
 */
proto.v1.PeerToPeerActionResponse.prototype.getPeertopeeractionstatus = function () {
	return /** @type {!proto.v1.PeerToPeerActionStatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.PeerToPeerActionStatusEnum} value
 * @return {!proto.v1.PeerToPeerActionResponse} returns this
 */
proto.v1.PeerToPeerActionResponse.prototype.setPeertopeeractionstatus = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.ChannelStreamRequest.oneofGroups_ = [[2, 3]];

/**
 * @enum {number}
 */
proto.v1.ChannelStreamRequest.EventCase = {
	EVENT_NOT_SET: 0,
	CHANNELSTREAMRESPONSE_PINGPONG: 2,
	CHANNELSTREAMRESPONSE_MESSAGE: 3
};

/**
 * @return {proto.v1.ChannelStreamRequest.EventCase}
 */
proto.v1.ChannelStreamRequest.prototype.getEventCase = function () {
	return /** @type {proto.v1.ChannelStreamRequest.EventCase} */ (jspb.Message.computeOneofCase(
		this,
		proto.v1.ChannelStreamRequest.oneofGroups_[0]
	));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
				channelstreamresponsePingpong:
					(f = msg.getChannelstreamresponsePingpong()) &&
					proto.v1.ChannelStreamRequest.PingPong.toObject(includeInstance, f),
				channelstreamresponseMessage:
					(f = msg.getChannelstreamresponseMessage()) &&
					proto.v1.ChannelStreamRequest.Message.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamRequest}
 */
proto.v1.ChannelStreamRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamRequest();
	return proto.v1.ChannelStreamRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamRequest}
 */
proto.v1.ChannelStreamRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			case 2:
				var value = new proto.v1.ChannelStreamRequest.PingPong();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamRequest.PingPong.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponsePingpong(value);
				break;
			case 3:
				var value = new proto.v1.ChannelStreamRequest.Message();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamRequest.Message.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getChannelstreamresponsePingpong();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.v1.ChannelStreamRequest.PingPong.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseMessage();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.v1.ChannelStreamRequest.Message.serializeBinaryToWriter
		);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamRequest.PingPong.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamRequest.PingPong.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamRequest.PingPong} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamRequest.PingPong.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamRequest.PingPong}
 */
proto.v1.ChannelStreamRequest.PingPong.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamRequest.PingPong();
	return proto.v1.ChannelStreamRequest.PingPong.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamRequest.PingPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamRequest.PingPong}
 */
proto.v1.ChannelStreamRequest.PingPong.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamRequest.PingPong.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamRequest.PingPong.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamRequest.PingPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamRequest.PingPong.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamRequest.Message.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamRequest.Message.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamRequest.Message} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamRequest.Message.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f),
				channelmessagetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
				timesend: jspb.Message.getFieldWithDefault(msg, 4, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamRequest.Message}
 */
proto.v1.ChannelStreamRequest.Message.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamRequest.Message();
	return proto.v1.ChannelStreamRequest.Message.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamRequest.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamRequest.Message}
 */
proto.v1.ChannelStreamRequest.Message.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSender(value);
				break;
			case 2:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			case 3:
				var value = /** @type {!proto.v1.ChannelMessageTypeEnum} */ (reader.readEnum());
				msg.setChannelmessagetype(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setTimesend(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamRequest.Message.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamRequest.Message.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamRequest.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamRequest.Message.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSender();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(2, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
	f = message.getChannelmessagetype();
	if (f !== 0.0) {
		writer.writeEnum(3, f);
	}
	f = message.getTimesend();
	if (f !== 0) {
		writer.writeInt64(4, f);
	}
};

/**
 * optional string Sender = 1;
 * @return {string}
 */
proto.v1.ChannelStreamRequest.Message.prototype.getSender = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamRequest.Message} returns this
 */
proto.v1.ChannelStreamRequest.Message.prototype.setSender = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional RtmMessage RtmMessage = 2;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.ChannelStreamRequest.Message.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		2
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.ChannelStreamRequest.Message} returns this
 */
proto.v1.ChannelStreamRequest.Message.prototype.setRtmmessage = function (
	value
) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamRequest.Message} returns this
 */
proto.v1.ChannelStreamRequest.Message.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamRequest.Message.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ChannelMessageTypeEnum ChannelMessageType = 3;
 * @return {!proto.v1.ChannelMessageTypeEnum}
 */
proto.v1.ChannelStreamRequest.Message.prototype.getChannelmessagetype = function () {
	return /** @type {!proto.v1.ChannelMessageTypeEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		0
	));
};

/**
 * @param {!proto.v1.ChannelMessageTypeEnum} value
 * @return {!proto.v1.ChannelStreamRequest.Message} returns this
 */
proto.v1.ChannelStreamRequest.Message.prototype.setChannelmessagetype = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional int64 TimeSend = 4;
 * @return {number}
 */
proto.v1.ChannelStreamRequest.Message.prototype.getTimesend = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.ChannelStreamRequest.Message} returns this
 */
proto.v1.ChannelStreamRequest.Message.prototype.setTimesend = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.ChannelStreamRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamRequest} returns this
 */
proto.v1.ChannelStreamRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional PingPong ChannelStreamResponse_PingPong = 2;
 * @return {?proto.v1.ChannelStreamRequest.PingPong}
 */
proto.v1.ChannelStreamRequest.prototype.getChannelstreamresponsePingpong = function () {
	return /** @type{?proto.v1.ChannelStreamRequest.PingPong} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamRequest.PingPong,
		2
	));
};

/**
 * @param {?proto.v1.ChannelStreamRequest.PingPong|undefined} value
 * @return {!proto.v1.ChannelStreamRequest} returns this
 */
proto.v1.ChannelStreamRequest.prototype.setChannelstreamresponsePingpong = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.v1.ChannelStreamRequest.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamRequest} returns this
 */
proto.v1.ChannelStreamRequest.prototype.clearChannelstreamresponsePingpong = function () {
	return this.setChannelstreamresponsePingpong(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamRequest.prototype.hasChannelstreamresponsePingpong = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Message ChannelStreamResponse_Message = 3;
 * @return {?proto.v1.ChannelStreamRequest.Message}
 */
proto.v1.ChannelStreamRequest.prototype.getChannelstreamresponseMessage = function () {
	return /** @type{?proto.v1.ChannelStreamRequest.Message} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamRequest.Message,
		3
	));
};

/**
 * @param {?proto.v1.ChannelStreamRequest.Message|undefined} value
 * @return {!proto.v1.ChannelStreamRequest} returns this
 */
proto.v1.ChannelStreamRequest.prototype.setChannelstreamresponseMessage = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.v1.ChannelStreamRequest.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamRequest} returns this
 */
proto.v1.ChannelStreamRequest.prototype.clearChannelstreamresponseMessage = function () {
	return this.setChannelstreamresponseMessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamRequest.prototype.hasChannelstreamresponseMessage = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.ChannelStreamResponse.oneofGroups_ = [[2, 3, 4, 5, 6, 7]];

/**
 * @enum {number}
 */
proto.v1.ChannelStreamResponse.EventCase = {
	EVENT_NOT_SET: 0,
	CHANNELSTREAMRESPONSE_PINGPONG: 2,
	CHANNELSTREAMRESPONSE_MESSAGE: 3,
	CHANNELSTREAMRESPONSE_SHUTDOWN: 4,
	CHANNELSTREAMRESPONSE_SUBSCRIBE: 5,
	CHANNELSTREAMRESPONSE_UNSUBSCRIBE: 6,
	CHANNELSTREAMRESPONSE_RELEASE: 7
};

/**
 * @return {proto.v1.ChannelStreamResponse.EventCase}
 */
proto.v1.ChannelStreamResponse.prototype.getEventCase = function () {
	return /** @type {proto.v1.ChannelStreamResponse.EventCase} */ (jspb.Message.computeOneofCase(
		this,
		proto.v1.ChannelStreamResponse.oneofGroups_[0]
	));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
				channelstreamresponsePingpong:
					(f = msg.getChannelstreamresponsePingpong()) &&
					proto.v1.ChannelStreamResponse.PingPong.toObject(includeInstance, f),
				channelstreamresponseMessage:
					(f = msg.getChannelstreamresponseMessage()) &&
					proto.v1.ChannelStreamResponse.Message.toObject(includeInstance, f),
				channelstreamresponseShutdown:
					(f = msg.getChannelstreamresponseShutdown()) &&
					proto.v1.ChannelStreamResponse.Shutdown.toObject(includeInstance, f),
				channelstreamresponseSubscribe:
					(f = msg.getChannelstreamresponseSubscribe()) &&
					proto.v1.ChannelStreamResponse.Subscribe.toObject(includeInstance, f),
				channelstreamresponseUnsubscribe:
					(f = msg.getChannelstreamresponseUnsubscribe()) &&
					proto.v1.ChannelStreamResponse.UnSubscribe.toObject(
						includeInstance,
						f
					),
				channelstreamresponseRelease:
					(f = msg.getChannelstreamresponseRelease()) &&
					proto.v1.ChannelStreamResponse.Release.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse}
 */
proto.v1.ChannelStreamResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse();
	return proto.v1.ChannelStreamResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse}
 */
proto.v1.ChannelStreamResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			case 2:
				var value = new proto.v1.ChannelStreamResponse.PingPong();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.PingPong.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponsePingpong(value);
				break;
			case 3:
				var value = new proto.v1.ChannelStreamResponse.Message();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.Message.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseMessage(value);
				break;
			case 4:
				var value = new proto.v1.ChannelStreamResponse.Shutdown();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.Shutdown.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseShutdown(value);
				break;
			case 5:
				var value = new proto.v1.ChannelStreamResponse.Subscribe();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.Subscribe.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseSubscribe(value);
				break;
			case 6:
				var value = new proto.v1.ChannelStreamResponse.UnSubscribe();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.UnSubscribe.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseUnsubscribe(value);
				break;
			case 7:
				var value = new proto.v1.ChannelStreamResponse.Release();
				reader.readMessage(
					value,
					proto.v1.ChannelStreamResponse.Release.deserializeBinaryFromReader
				);
				msg.setChannelstreamresponseRelease(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getChannelstreamresponsePingpong();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.v1.ChannelStreamResponse.PingPong.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseMessage();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.v1.ChannelStreamResponse.Message.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseShutdown();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			proto.v1.ChannelStreamResponse.Shutdown.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseSubscribe();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			proto.v1.ChannelStreamResponse.Subscribe.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseUnsubscribe();
	if (f != null) {
		writer.writeMessage(
			6,
			f,
			proto.v1.ChannelStreamResponse.UnSubscribe.serializeBinaryToWriter
		);
	}
	f = message.getChannelstreamresponseRelease();
	if (f != null) {
		writer.writeMessage(
			7,
			f,
			proto.v1.ChannelStreamResponse.Release.serializeBinaryToWriter
		);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.Message.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.Message.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.Message} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.Message.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f),
				channelmessagetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
				timesend: jspb.Message.getFieldWithDefault(msg, 4, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.Message}
 */
proto.v1.ChannelStreamResponse.Message.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.Message();
	return proto.v1.ChannelStreamResponse.Message.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.Message}
 */
proto.v1.ChannelStreamResponse.Message.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSender(value);
				break;
			case 2:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			case 3:
				var value = /** @type {!proto.v1.ChannelMessageTypeEnum} */ (reader.readEnum());
				msg.setChannelmessagetype(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setTimesend(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.Message.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.Message.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.Message.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSender();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(2, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
	f = message.getChannelmessagetype();
	if (f !== 0.0) {
		writer.writeEnum(3, f);
	}
	f = message.getTimesend();
	if (f !== 0) {
		writer.writeInt64(4, f);
	}
};

/**
 * optional string Sender = 1;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.Message.prototype.getSender = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.Message} returns this
 */
proto.v1.ChannelStreamResponse.Message.prototype.setSender = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional RtmMessage RtmMessage = 2;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.ChannelStreamResponse.Message.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		2
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.ChannelStreamResponse.Message} returns this
 */
proto.v1.ChannelStreamResponse.Message.prototype.setRtmmessage = function (
	value
) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse.Message} returns this
 */
proto.v1.ChannelStreamResponse.Message.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.Message.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ChannelMessageTypeEnum ChannelMessageType = 3;
 * @return {!proto.v1.ChannelMessageTypeEnum}
 */
proto.v1.ChannelStreamResponse.Message.prototype.getChannelmessagetype = function () {
	return /** @type {!proto.v1.ChannelMessageTypeEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		0
	));
};

/**
 * @param {!proto.v1.ChannelMessageTypeEnum} value
 * @return {!proto.v1.ChannelStreamResponse.Message} returns this
 */
proto.v1.ChannelStreamResponse.Message.prototype.setChannelmessagetype = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional int64 TimeSend = 4;
 * @return {number}
 */
proto.v1.ChannelStreamResponse.Message.prototype.getTimesend = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.ChannelStreamResponse.Message} returns this
 */
proto.v1.ChannelStreamResponse.Message.prototype.setTimesend = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.Shutdown.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.Shutdown.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.Shutdown} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.Shutdown.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.Shutdown}
 */
proto.v1.ChannelStreamResponse.Shutdown.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.Shutdown();
	return proto.v1.ChannelStreamResponse.Shutdown.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.Shutdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.Shutdown}
 */
proto.v1.ChannelStreamResponse.Shutdown.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.Shutdown.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.Shutdown.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.Shutdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.Shutdown.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.Subscribe.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.Subscribe.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.Subscribe} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.Subscribe.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				username: jspb.Message.getFieldWithDefault(msg, 1, ""),
				userinchannelamount: jspb.Message.getFieldWithDefault(msg, 2, 0),
				avatarurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
				userdisplayname: jspb.Message.getFieldWithDefault(msg, 4, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.Subscribe}
 */
proto.v1.ChannelStreamResponse.Subscribe.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.Subscribe();
	return proto.v1.ChannelStreamResponse.Subscribe.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.Subscribe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.Subscribe}
 */
proto.v1.ChannelStreamResponse.Subscribe.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setUsername(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setUserinchannelamount(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setAvatarurl(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setUserdisplayname(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.Subscribe.serializeBinaryToWriter(
		this,
		writer
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.Subscribe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.Subscribe.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUsername();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getUserinchannelamount();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
	f = message.getAvatarurl();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getUserdisplayname();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional string UserName = 1;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.getUsername = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.Subscribe} returns this
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.setUsername = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int64 UserInChannelAmount = 2;
 * @return {number}
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.getUserinchannelamount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.ChannelStreamResponse.Subscribe} returns this
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.setUserinchannelamount = function (
	value
) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string AvatarUrl = 3;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.getAvatarurl = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.Subscribe} returns this
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.setAvatarurl = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string UserDisplayName = 4;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.getUserdisplayname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.Subscribe} returns this
 */
proto.v1.ChannelStreamResponse.Subscribe.prototype.setUserdisplayname = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.UnSubscribe.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.UnSubscribe.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.UnSubscribe} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.UnSubscribe.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				userdisplayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				username: jspb.Message.getFieldWithDefault(msg, 2, ""),
				userinchannelamount: jspb.Message.getFieldWithDefault(msg, 3, 0)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.UnSubscribe}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.UnSubscribe();
	return proto.v1.ChannelStreamResponse.UnSubscribe.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.UnSubscribe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.UnSubscribe}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setUserdisplayname(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setUsername(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setUserinchannelamount(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.UnSubscribe.serializeBinaryToWriter(
		this,
		writer
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.UnSubscribe} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.UnSubscribe.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUserdisplayname();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getUsername();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getUserinchannelamount();
	if (f !== 0) {
		writer.writeInt64(3, f);
	}
};

/**
 * optional string UserDisplayName = 1;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.getUserdisplayname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.UnSubscribe} returns this
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.setUserdisplayname = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string UserName = 2;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.getUsername = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse.UnSubscribe} returns this
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.setUsername = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int64 UserInChannelAmount = 3;
 * @return {number}
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.getUserinchannelamount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.ChannelStreamResponse.UnSubscribe} returns this
 */
proto.v1.ChannelStreamResponse.UnSubscribe.prototype.setUserinchannelamount = function (
	value
) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.Release.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.Release.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.Release} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.Release.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.Release}
 */
proto.v1.ChannelStreamResponse.Release.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.Release();
	return proto.v1.ChannelStreamResponse.Release.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.Release} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.Release}
 */
proto.v1.ChannelStreamResponse.Release.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.Release.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.Release.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.Release} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.Release.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.ChannelStreamResponse.PingPong.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.ChannelStreamResponse.PingPong.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.ChannelStreamResponse.PingPong} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.ChannelStreamResponse.PingPong.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ChannelStreamResponse.PingPong}
 */
proto.v1.ChannelStreamResponse.PingPong.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.ChannelStreamResponse.PingPong();
	return proto.v1.ChannelStreamResponse.PingPong.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ChannelStreamResponse.PingPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ChannelStreamResponse.PingPong}
 */
proto.v1.ChannelStreamResponse.PingPong.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ChannelStreamResponse.PingPong.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.ChannelStreamResponse.PingPong.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ChannelStreamResponse.PingPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ChannelStreamResponse.PingPong.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.ChannelStreamResponse.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional PingPong ChannelStreamResponse_PingPong = 2;
 * @return {?proto.v1.ChannelStreamResponse.PingPong}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponsePingpong = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.PingPong} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.PingPong,
		2
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.PingPong|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponsePingpong = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponsePingpong = function () {
	return this.setChannelstreamresponsePingpong(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponsePingpong = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Message ChannelStreamResponse_Message = 3;
 * @return {?proto.v1.ChannelStreamResponse.Message}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponseMessage = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.Message} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.Message,
		3
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.Message|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponseMessage = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponseMessage = function () {
	return this.setChannelstreamresponseMessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponseMessage = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Shutdown ChannelStreamResponse_Shutdown = 4;
 * @return {?proto.v1.ChannelStreamResponse.Shutdown}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponseShutdown = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.Shutdown} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.Shutdown,
		4
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.Shutdown|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponseShutdown = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		4,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponseShutdown = function () {
	return this.setChannelstreamresponseShutdown(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponseShutdown = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Subscribe ChannelStreamResponse_Subscribe = 5;
 * @return {?proto.v1.ChannelStreamResponse.Subscribe}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponseSubscribe = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.Subscribe} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.Subscribe,
		5
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.Subscribe|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponseSubscribe = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		5,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponseSubscribe = function () {
	return this.setChannelstreamresponseSubscribe(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponseSubscribe = function () {
	return jspb.Message.getField(this, 5) != null;
};

/**
 * optional UnSubscribe ChannelStreamResponse_UnSubscribe = 6;
 * @return {?proto.v1.ChannelStreamResponse.UnSubscribe}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponseUnsubscribe = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.UnSubscribe} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.UnSubscribe,
		6
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.UnSubscribe|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponseUnsubscribe = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		6,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponseUnsubscribe = function () {
	return this.setChannelstreamresponseUnsubscribe(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponseUnsubscribe = function () {
	return jspb.Message.getField(this, 6) != null;
};

/**
 * optional Release ChannelStreamResponse_Release = 7;
 * @return {?proto.v1.ChannelStreamResponse.Release}
 */
proto.v1.ChannelStreamResponse.prototype.getChannelstreamresponseRelease = function () {
	return /** @type{?proto.v1.ChannelStreamResponse.Release} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.ChannelStreamResponse.Release,
		7
	));
};

/**
 * @param {?proto.v1.ChannelStreamResponse.Release|undefined} value
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.setChannelstreamresponseRelease = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		7,
		proto.v1.ChannelStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.ChannelStreamResponse} returns this
 */
proto.v1.ChannelStreamResponse.prototype.clearChannelstreamresponseRelease = function () {
	return this.setChannelstreamresponseRelease(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.ChannelStreamResponse.prototype.hasChannelstreamresponseRelease = function () {
	return jspb.Message.getField(this, 7) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.PeerStreamRequest.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.v1.PeerStreamRequest.EventCase = {
	EVENT_NOT_SET: 0,
	PEERSTREAMRESPONSE_PINGPONG: 3
};

/**
 * @return {proto.v1.PeerStreamRequest.EventCase}
 */
proto.v1.PeerStreamRequest.prototype.getEventCase = function () {
	return /** @type {proto.v1.PeerStreamRequest.EventCase} */ (jspb.Message.computeOneofCase(
		this,
		proto.v1.PeerStreamRequest.oneofGroups_[0]
	));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamRequest.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f),
				receiver: jspb.Message.getFieldWithDefault(msg, 2, ""),
				peerstreamresponsePingpong:
					(f = msg.getPeerstreamresponsePingpong()) &&
					proto.v1.PeerStreamRequest.PingPong.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamRequest}
 */
proto.v1.PeerStreamRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamRequest();
	return proto.v1.PeerStreamRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamRequest}
 */
proto.v1.PeerStreamRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setReceiver(value);
				break;
			case 3:
				var value = new proto.v1.PeerStreamRequest.PingPong();
				reader.readMessage(
					value,
					proto.v1.PeerStreamRequest.PingPong.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponsePingpong(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(1, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
	f = message.getReceiver();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getPeerstreamresponsePingpong();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.v1.PeerStreamRequest.PingPong.serializeBinaryToWriter
		);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamRequest.PingPong.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamRequest.PingPong.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamRequest.PingPong} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamRequest.PingPong.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamRequest.PingPong}
 */
proto.v1.PeerStreamRequest.PingPong.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamRequest.PingPong();
	return proto.v1.PeerStreamRequest.PingPong.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamRequest.PingPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamRequest.PingPong}
 */
proto.v1.PeerStreamRequest.PingPong.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamRequest.PingPong.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamRequest.PingPong.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamRequest.PingPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamRequest.PingPong.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

/**
 * optional RtmMessage RtmMessage = 1;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.PeerStreamRequest.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		1
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.PeerStreamRequest} returns this
 */
proto.v1.PeerStreamRequest.prototype.setRtmmessage = function (value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamRequest} returns this
 */
proto.v1.PeerStreamRequest.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamRequest.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string Receiver = 2;
 * @return {string}
 */
proto.v1.PeerStreamRequest.prototype.getReceiver = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.PeerStreamRequest} returns this
 */
proto.v1.PeerStreamRequest.prototype.setReceiver = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional PingPong PeerStreamResponse_PingPong = 3;
 * @return {?proto.v1.PeerStreamRequest.PingPong}
 */
proto.v1.PeerStreamRequest.prototype.getPeerstreamresponsePingpong = function () {
	return /** @type{?proto.v1.PeerStreamRequest.PingPong} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamRequest.PingPong,
		3
	));
};

/**
 * @param {?proto.v1.PeerStreamRequest.PingPong|undefined} value
 * @return {!proto.v1.PeerStreamRequest} returns this
 */
proto.v1.PeerStreamRequest.prototype.setPeerstreamresponsePingpong = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.v1.PeerStreamRequest.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamRequest} returns this
 */
proto.v1.PeerStreamRequest.prototype.clearPeerstreamresponsePingpong = function () {
	return this.setPeerstreamresponsePingpong(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamRequest.prototype.hasPeerstreamresponsePingpong = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.PeerStreamResponse.oneofGroups_ = [[1, 2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.v1.PeerStreamResponse.EventCase = {
	EVENT_NOT_SET: 0,
	PEERSTREAMRESPONSE_PINGPONG: 1,
	PEERSTREAMRESPONSE_ADMINACTION: 2,
	PEERSTREAMRESPONSE_PEERACTION: 3,
	PEERSTREAMRESPONSE_MESSAGE: 4,
	PEERSTREAMRESPONSE_SHUTDOWN: 5
};

/**
 * @return {proto.v1.PeerStreamResponse.EventCase}
 */
proto.v1.PeerStreamResponse.prototype.getEventCase = function () {
	return /** @type {proto.v1.PeerStreamResponse.EventCase} */ (jspb.Message.computeOneofCase(
		this,
		proto.v1.PeerStreamResponse.oneofGroups_[0]
	));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.toObject(opt_includeInstance, this);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				peerstreamresponsePingpong:
					(f = msg.getPeerstreamresponsePingpong()) &&
					proto.v1.PeerStreamResponse.PingPong.toObject(includeInstance, f),
				peerstreamresponseAdminaction:
					(f = msg.getPeerstreamresponseAdminaction()) &&
					proto.v1.PeerStreamResponse.AdminAction.toObject(includeInstance, f),
				peerstreamresponsePeeraction:
					(f = msg.getPeerstreamresponsePeeraction()) &&
					proto.v1.PeerStreamResponse.PeerAction.toObject(includeInstance, f),
				peerstreamresponseMessage:
					(f = msg.getPeerstreamresponseMessage()) &&
					proto.v1.PeerStreamResponse.Message.toObject(includeInstance, f),
				peerstreamresponseShutdown:
					(f = msg.getPeerstreamresponseShutdown()) &&
					proto.v1.PeerStreamResponse.Shutdown.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse}
 */
proto.v1.PeerStreamResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse();
	return proto.v1.PeerStreamResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse}
 */
proto.v1.PeerStreamResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.PeerStreamResponse.PingPong();
				reader.readMessage(
					value,
					proto.v1.PeerStreamResponse.PingPong.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponsePingpong(value);
				break;
			case 2:
				var value = new proto.v1.PeerStreamResponse.AdminAction();
				reader.readMessage(
					value,
					proto.v1.PeerStreamResponse.AdminAction.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponseAdminaction(value);
				break;
			case 3:
				var value = new proto.v1.PeerStreamResponse.PeerAction();
				reader.readMessage(
					value,
					proto.v1.PeerStreamResponse.PeerAction.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponsePeeraction(value);
				break;
			case 4:
				var value = new proto.v1.PeerStreamResponse.Message();
				reader.readMessage(
					value,
					proto.v1.PeerStreamResponse.Message.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponseMessage(value);
				break;
			case 5:
				var value = new proto.v1.PeerStreamResponse.Shutdown();
				reader.readMessage(
					value,
					proto.v1.PeerStreamResponse.Shutdown.deserializeBinaryFromReader
				);
				msg.setPeerstreamresponseShutdown(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getPeerstreamresponsePingpong();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.v1.PeerStreamResponse.PingPong.serializeBinaryToWriter
		);
	}
	f = message.getPeerstreamresponseAdminaction();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.v1.PeerStreamResponse.AdminAction.serializeBinaryToWriter
		);
	}
	f = message.getPeerstreamresponsePeeraction();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.v1.PeerStreamResponse.PeerAction.serializeBinaryToWriter
		);
	}
	f = message.getPeerstreamresponseMessage();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			proto.v1.PeerStreamResponse.Message.serializeBinaryToWriter
		);
	}
	f = message.getPeerstreamresponseShutdown();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			proto.v1.PeerStreamResponse.Shutdown.serializeBinaryToWriter
		);
	}
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.AdminAction.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.AdminAction.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse.AdminAction} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.AdminAction.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				adminactionchannelenum: jspb.Message.getFieldWithDefault(msg, 1, 0),
				message: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse.AdminAction}
 */
proto.v1.PeerStreamResponse.AdminAction.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse.AdminAction();
	return proto.v1.PeerStreamResponse.AdminAction.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse.AdminAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse.AdminAction}
 */
proto.v1.PeerStreamResponse.AdminAction.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.AdminActionChannelEnum} */ (reader.readEnum());
				msg.setAdminactionchannelenum(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.AdminAction.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.AdminAction.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse.AdminAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.AdminAction.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getAdminactionchannelenum();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional AdminActionChannelEnum AdminActionChannelEnum = 1;
 * @return {!proto.v1.AdminActionChannelEnum}
 */
proto.v1.PeerStreamResponse.AdminAction.prototype.getAdminactionchannelenum = function () {
	return /** @type {!proto.v1.AdminActionChannelEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.AdminActionChannelEnum} value
 * @return {!proto.v1.PeerStreamResponse.AdminAction} returns this
 */
proto.v1.PeerStreamResponse.AdminAction.prototype.setAdminactionchannelenum = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string Message = 2;
 * @return {string}
 */
proto.v1.PeerStreamResponse.AdminAction.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.PeerStreamResponse.AdminAction} returns this
 */
proto.v1.PeerStreamResponse.AdminAction.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.PeerAction.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.PeerAction.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse.PeerAction} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.PeerAction.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				peertopeeractionenum: jspb.Message.getFieldWithDefault(msg, 1, 0),
				message: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse.PeerAction}
 */
proto.v1.PeerStreamResponse.PeerAction.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse.PeerAction();
	return proto.v1.PeerStreamResponse.PeerAction.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse.PeerAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse.PeerAction}
 */
proto.v1.PeerStreamResponse.PeerAction.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.PeerToPeerActionEnum} */ (reader.readEnum());
				msg.setPeertopeeractionenum(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.PeerAction.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.PeerAction.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse.PeerAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.PeerAction.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getPeertopeeractionenum();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional PeerToPeerActionEnum PeerToPeerActionEnum = 1;
 * @return {!proto.v1.PeerToPeerActionEnum}
 */
proto.v1.PeerStreamResponse.PeerAction.prototype.getPeertopeeractionenum = function () {
	return /** @type {!proto.v1.PeerToPeerActionEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.PeerToPeerActionEnum} value
 * @return {!proto.v1.PeerStreamResponse.PeerAction} returns this
 */
proto.v1.PeerStreamResponse.PeerAction.prototype.setPeertopeeractionenum = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string Message = 2;
 * @return {string}
 */
proto.v1.PeerStreamResponse.PeerAction.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.PeerStreamResponse.PeerAction} returns this
 */
proto.v1.PeerStreamResponse.PeerAction.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.Message.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.Message.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse.Message} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.Message.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
				rtmmessage:
					(f = msg.getRtmmessage()) &&
					proto.v1.RtmMessage.toObject(includeInstance, f)
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse.Message}
 */
proto.v1.PeerStreamResponse.Message.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse.Message();
	return proto.v1.PeerStreamResponse.Message.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse.Message}
 */
proto.v1.PeerStreamResponse.Message.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSender(value);
				break;
			case 2:
				var value = new proto.v1.RtmMessage();
				reader.readMessage(
					value,
					proto.v1.RtmMessage.deserializeBinaryFromReader
				);
				msg.setRtmmessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.Message.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.Message.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.Message.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getSender();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getRtmmessage();
	if (f != null) {
		writer.writeMessage(2, f, proto.v1.RtmMessage.serializeBinaryToWriter);
	}
};

/**
 * optional string sender = 1;
 * @return {string}
 */
proto.v1.PeerStreamResponse.Message.prototype.getSender = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.PeerStreamResponse.Message} returns this
 */
proto.v1.PeerStreamResponse.Message.prototype.setSender = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional RtmMessage RtmMessage = 2;
 * @return {?proto.v1.RtmMessage}
 */
proto.v1.PeerStreamResponse.Message.prototype.getRtmmessage = function () {
	return /** @type{?proto.v1.RtmMessage} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.RtmMessage,
		2
	));
};

/**
 * @param {?proto.v1.RtmMessage|undefined} value
 * @return {!proto.v1.PeerStreamResponse.Message} returns this
 */
proto.v1.PeerStreamResponse.Message.prototype.setRtmmessage = function (value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse.Message} returns this
 */
proto.v1.PeerStreamResponse.Message.prototype.clearRtmmessage = function () {
	return this.setRtmmessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.Message.prototype.hasRtmmessage = function () {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.Shutdown.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.Shutdown.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse.Shutdown} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.Shutdown.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse.Shutdown}
 */
proto.v1.PeerStreamResponse.Shutdown.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse.Shutdown();
	return proto.v1.PeerStreamResponse.Shutdown.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse.Shutdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse.Shutdown}
 */
proto.v1.PeerStreamResponse.Shutdown.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.Shutdown.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.Shutdown.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse.Shutdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.Shutdown.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.PeerStreamResponse.PingPong.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.PeerStreamResponse.PingPong.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.PeerStreamResponse.PingPong} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.PeerStreamResponse.PingPong.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PeerStreamResponse.PingPong}
 */
proto.v1.PeerStreamResponse.PingPong.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.PeerStreamResponse.PingPong();
	return proto.v1.PeerStreamResponse.PingPong.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PeerStreamResponse.PingPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PeerStreamResponse.PingPong}
 */
proto.v1.PeerStreamResponse.PingPong.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PeerStreamResponse.PingPong.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.PeerStreamResponse.PingPong.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PeerStreamResponse.PingPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PeerStreamResponse.PingPong.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
};

/**
 * optional PingPong PeerStreamResponse_PingPong = 1;
 * @return {?proto.v1.PeerStreamResponse.PingPong}
 */
proto.v1.PeerStreamResponse.prototype.getPeerstreamresponsePingpong = function () {
	return /** @type{?proto.v1.PeerStreamResponse.PingPong} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamResponse.PingPong,
		1
	));
};

/**
 * @param {?proto.v1.PeerStreamResponse.PingPong|undefined} value
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.setPeerstreamresponsePingpong = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		1,
		proto.v1.PeerStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.clearPeerstreamresponsePingpong = function () {
	return this.setPeerstreamresponsePingpong(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.prototype.hasPeerstreamresponsePingpong = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AdminAction PeerStreamResponse_AdminAction = 2;
 * @return {?proto.v1.PeerStreamResponse.AdminAction}
 */
proto.v1.PeerStreamResponse.prototype.getPeerstreamresponseAdminaction = function () {
	return /** @type{?proto.v1.PeerStreamResponse.AdminAction} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamResponse.AdminAction,
		2
	));
};

/**
 * @param {?proto.v1.PeerStreamResponse.AdminAction|undefined} value
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.setPeerstreamresponseAdminaction = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.v1.PeerStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.clearPeerstreamresponseAdminaction = function () {
	return this.setPeerstreamresponseAdminaction(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.prototype.hasPeerstreamresponseAdminaction = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional PeerAction PeerStreamResponse_PeerAction = 3;
 * @return {?proto.v1.PeerStreamResponse.PeerAction}
 */
proto.v1.PeerStreamResponse.prototype.getPeerstreamresponsePeeraction = function () {
	return /** @type{?proto.v1.PeerStreamResponse.PeerAction} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamResponse.PeerAction,
		3
	));
};

/**
 * @param {?proto.v1.PeerStreamResponse.PeerAction|undefined} value
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.setPeerstreamresponsePeeraction = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.v1.PeerStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.clearPeerstreamresponsePeeraction = function () {
	return this.setPeerstreamresponsePeeraction(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.prototype.hasPeerstreamresponsePeeraction = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Message PeerStreamResponse_Message = 4;
 * @return {?proto.v1.PeerStreamResponse.Message}
 */
proto.v1.PeerStreamResponse.prototype.getPeerstreamresponseMessage = function () {
	return /** @type{?proto.v1.PeerStreamResponse.Message} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamResponse.Message,
		4
	));
};

/**
 * @param {?proto.v1.PeerStreamResponse.Message|undefined} value
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.setPeerstreamresponseMessage = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		4,
		proto.v1.PeerStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.clearPeerstreamresponseMessage = function () {
	return this.setPeerstreamresponseMessage(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.prototype.hasPeerstreamresponseMessage = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Shutdown PeerStreamResponse_Shutdown = 5;
 * @return {?proto.v1.PeerStreamResponse.Shutdown}
 */
proto.v1.PeerStreamResponse.prototype.getPeerstreamresponseShutdown = function () {
	return /** @type{?proto.v1.PeerStreamResponse.Shutdown} */ (jspb.Message.getWrapperField(
		this,
		proto.v1.PeerStreamResponse.Shutdown,
		5
	));
};

/**
 * @param {?proto.v1.PeerStreamResponse.Shutdown|undefined} value
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.setPeerstreamresponseShutdown = function (
	value
) {
	return jspb.Message.setOneofWrapperField(
		this,
		5,
		proto.v1.PeerStreamResponse.oneofGroups_[0],
		value
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PeerStreamResponse} returns this
 */
proto.v1.PeerStreamResponse.prototype.clearPeerstreamresponseShutdown = function () {
	return this.setPeerstreamresponseShutdown(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PeerStreamResponse.prototype.hasPeerstreamresponseShutdown = function () {
	return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.GetUsersInChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.GetUsersInChannelRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.GetUsersInChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.GetUsersInChannelRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetUsersInChannelRequest}
 */
proto.v1.GetUsersInChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.GetUsersInChannelRequest();
	return proto.v1.GetUsersInChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetUsersInChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetUsersInChannelRequest}
 */
proto.v1.GetUsersInChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetUsersInChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.GetUsersInChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetUsersInChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetUsersInChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.GetUsersInChannelRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.GetUsersInChannelRequest} returns this
 */
proto.v1.GetUsersInChannelRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.GetUsersInChannelResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.GetUsersInChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.GetUsersInChannelResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.GetUsersInChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.GetUsersInChannelResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				userlistList: jspb.Message.toObjectList(
					msg.getUserlistList(),
					proto.v1.LiteUser.toObject,
					includeInstance
				),
				channel: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetUsersInChannelResponse}
 */
proto.v1.GetUsersInChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.GetUsersInChannelResponse();
	return proto.v1.GetUsersInChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetUsersInChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetUsersInChannelResponse}
 */
proto.v1.GetUsersInChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.v1.LiteUser();
				reader.readMessage(
					value,
					proto.v1.LiteUser.deserializeBinaryFromReader
				);
				msg.addUserlist(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetUsersInChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.GetUsersInChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetUsersInChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetUsersInChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUserlistList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			proto.v1.LiteUser.serializeBinaryToWriter
		);
	}
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * repeated LiteUser UserList = 1;
 * @return {!Array<!proto.v1.LiteUser>}
 */
proto.v1.GetUsersInChannelResponse.prototype.getUserlistList = function () {
	return /** @type{!Array<!proto.v1.LiteUser>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		proto.v1.LiteUser,
		1
	));
};

/**
 * @param {!Array<!proto.v1.LiteUser>} value
 * @return {!proto.v1.GetUsersInChannelResponse} returns this
 */
proto.v1.GetUsersInChannelResponse.prototype.setUserlistList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.v1.LiteUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.LiteUser}
 */
proto.v1.GetUsersInChannelResponse.prototype.addUserlist = function (
	opt_value,
	opt_index
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.v1.LiteUser,
		opt_index
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.GetUsersInChannelResponse} returns this
 */
proto.v1.GetUsersInChannelResponse.prototype.clearUserlistList = function () {
	return this.setUserlistList([]);
};

/**
 * optional string Channel = 2;
 * @return {string}
 */
proto.v1.GetUsersInChannelResponse.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.GetUsersInChannelResponse} returns this
 */
proto.v1.GetUsersInChannelResponse.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.GetUserAmountInChannelRequest.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.GetUserAmountInChannelRequest.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.GetUserAmountInChannelRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.GetUserAmountInChannelRequest.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetUserAmountInChannelRequest}
 */
proto.v1.GetUserAmountInChannelRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.GetUserAmountInChannelRequest();
	return proto.v1.GetUserAmountInChannelRequest.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetUserAmountInChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetUserAmountInChannelRequest}
 */
proto.v1.GetUserAmountInChannelRequest.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetUserAmountInChannelRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.GetUserAmountInChannelRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetUserAmountInChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetUserAmountInChannelRequest.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.GetUserAmountInChannelRequest.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.GetUserAmountInChannelRequest} returns this
 */
proto.v1.GetUserAmountInChannelRequest.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.GetUserAmountInChannelResponse.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.GetUserAmountInChannelResponse.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.GetUserAmountInChannelResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.GetUserAmountInChannelResponse.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				useramount: jspb.Message.getFieldWithDefault(msg, 1, 0),
				channel: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetUserAmountInChannelResponse}
 */
proto.v1.GetUserAmountInChannelResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.GetUserAmountInChannelResponse();
	return proto.v1.GetUserAmountInChannelResponse.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetUserAmountInChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetUserAmountInChannelResponse}
 */
proto.v1.GetUserAmountInChannelResponse.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setUseramount(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetUserAmountInChannelResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.GetUserAmountInChannelResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetUserAmountInChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetUserAmountInChannelResponse.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUseramount();
	if (f !== 0) {
		writer.writeInt64(1, f);
	}
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional int64 UserAmount = 1;
 * @return {number}
 */
proto.v1.GetUserAmountInChannelResponse.prototype.getUseramount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.v1.GetUserAmountInChannelResponse} returns this
 */
proto.v1.GetUserAmountInChannelResponse.prototype.setUseramount = function (
	value
) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string Channel = 2;
 * @return {string}
 */
proto.v1.GetUserAmountInChannelResponse.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.GetUserAmountInChannelResponse} returns this
 */
proto.v1.GetUserAmountInChannelResponse.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.UploadChatFileToS3Request.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.UploadChatFileToS3Request.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.UploadChatFileToS3Request} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.UploadChatFileToS3Request.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
				s3folder: jspb.Message.getFieldWithDefault(msg, 2, ""),
				filenamewithextension: jspb.Message.getFieldWithDefault(msg, 3, ""),
				s3apikey: jspb.Message.getFieldWithDefault(msg, 4, ""),
				s3apisecret: jspb.Message.getFieldWithDefault(msg, 5, ""),
				s3acedomain: jspb.Message.getFieldWithDefault(msg, 6, ""),
				s3domoain: jspb.Message.getFieldWithDefault(msg, 7, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UploadChatFileToS3Request}
 */
proto.v1.UploadChatFileToS3Request.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.UploadChatFileToS3Request();
	return proto.v1.UploadChatFileToS3Request.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UploadChatFileToS3Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UploadChatFileToS3Request}
 */
proto.v1.UploadChatFileToS3Request.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setChannel(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setS3folder(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setFilenamewithextension(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setS3apikey(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setS3apisecret(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setS3acedomain(value);
				break;
			case 7:
				var value = /** @type {string} */ (reader.readString());
				msg.setS3domoain(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UploadChatFileToS3Request.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.UploadChatFileToS3Request.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UploadChatFileToS3Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UploadChatFileToS3Request.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getChannel();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getS3folder();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getFilenamewithextension();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getS3apikey();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getS3apisecret();
	if (f.length > 0) {
		writer.writeString(5, f);
	}
	f = message.getS3acedomain();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
	f = message.getS3domoain();
	if (f.length > 0) {
		writer.writeString(7, f);
	}
};

/**
 * optional string Channel = 1;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getChannel = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setChannel = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string S3Folder = 2;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getS3folder = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setS3folder = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string FileNameWithExtension = 3;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getFilenamewithextension = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setFilenamewithextension = function (
	value
) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string S3ApiKey = 4;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getS3apikey = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setS3apikey = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string S3ApiSecret = 5;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getS3apisecret = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setS3apisecret = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string S3AceDomain = 6;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getS3acedomain = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setS3acedomain = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string S3Domoain = 7;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Request.prototype.getS3domoain = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Request} returns this
 */
proto.v1.UploadChatFileToS3Request.prototype.setS3domoain = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.v1.UploadChatFileToS3Response.prototype.toObject = function (
		opt_includeInstance
	) {
		return proto.v1.UploadChatFileToS3Response.toObject(
			opt_includeInstance,
			this
		);
	};
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.v1.UploadChatFileToS3Response} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.v1.UploadChatFileToS3Response.toObject = function (
		includeInstance,
		msg
	) {
		var f,
			obj = {
				uploadchatfiletos3status: jspb.Message.getFieldWithDefault(msg, 1, 0),
				message: jspb.Message.getFieldWithDefault(msg, 2, "")
			};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UploadChatFileToS3Response}
 */
proto.v1.UploadChatFileToS3Response.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.v1.UploadChatFileToS3Response();
	return proto.v1.UploadChatFileToS3Response.deserializeBinaryFromReader(
		msg,
		reader
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UploadChatFileToS3Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UploadChatFileToS3Response}
 */
proto.v1.UploadChatFileToS3Response.deserializeBinaryFromReader = function (
	msg,
	reader
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.v1.UploadChatFileToS3StatusEnum} */ (reader.readEnum());
				msg.setUploadchatfiletos3status(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UploadChatFileToS3Response.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.v1.UploadChatFileToS3Response.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UploadChatFileToS3Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UploadChatFileToS3Response.serializeBinaryToWriter = function (
	message,
	writer
) {
	var f = undefined;
	f = message.getUploadchatfiletos3status();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
};

/**
 * optional UploadChatFileToS3StatusEnum UploadChatFileToS3Status = 1;
 * @return {!proto.v1.UploadChatFileToS3StatusEnum}
 */
proto.v1.UploadChatFileToS3Response.prototype.getUploadchatfiletos3status = function () {
	return /** @type {!proto.v1.UploadChatFileToS3StatusEnum} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0
	));
};

/**
 * @param {!proto.v1.UploadChatFileToS3StatusEnum} value
 * @return {!proto.v1.UploadChatFileToS3Response} returns this
 */
proto.v1.UploadChatFileToS3Response.prototype.setUploadchatfiletos3status = function (
	value
) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string Message = 2;
 * @return {string}
 */
proto.v1.UploadChatFileToS3Response.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.v1.UploadChatFileToS3Response} returns this
 */
proto.v1.UploadChatFileToS3Response.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * @enum {number}
 */
proto.v1.AdminActionChannelEnum = {
	ADMIN_ADD: 0,
	ADMIN_KICK: 1,
	ADMIN_MUTE: 2,
	ADMIN_UNMUTE: 3,
	ADMIN_BAN: 4,
	ADMIN_UNBAN: 5
};

/**
 * @enum {number}
 */
proto.v1.PeerToPeerActionEnum = {
	USER_BLOCK: 0,
	USER_UNBLOCK: 1,
	USER_MUTE: 2,
	USER_UNMUTE: 3
};

/**
 * @enum {number}
 */
proto.v1.ChannelMessageTypeEnum = {
	NORMAL_MESSAGE: 0,
	SUBSCRIBE_CHANNEL: 1,
	UNSUBSCRIBE_CHANNEL: 2,
	START_CHAT: 3,
	END_CHAT: 4,
	MUTE_USER: 5,
	MUTE_USER_ALL: 6,
	CLEAR_CHAT_USER: 7,
	CLEAR_CHAT_ALL: 8,
	CLEAR_RECORD_USER: 9,
	CLEAR_RECORD_ALL: 10,
	STATISTIC: 11
};

/**
 * @enum {number}
 */
proto.v1.SubscribeChannelStatusEnum = {
	SUBSCRIBE_CHANNEL_NOTFOUND: 0,
	SUBSCRIBE_SUCCESSFUL: 1,
	SUBSCRIBE_FAILED: 2,
	SUBSCRIBE_IGNORED: 3,
	SUBSCRIBE_REACH_LIMIT: 4,
	SUBSCRIBE_REQUIRE_LOGIN: 5,
	SUBSCRIBE_REQUIRE_PASSWORD: 6
};

/**
 * @enum {number}
 */
proto.v1.UnsubscribeChannelStatusEnum = {
	UNSUBSCRIBE_CHANNEL_NOTFOUND: 0,
	UNSUBSCRIBE_SUCCESSFUL: 1,
	UNSUBSCRIBE_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.SendChannelMessageStatusEnum = {
	SENDCHANNEL_CHANNEL_NOTFOUND: 0,
	SENDCHANNEL_SUCCESSFUL: 1,
	SENDCHANNEL_FAILED: 2,
	SENDCHANNEL_IGNORE: 3,
	SENDCHANNEL_REACH_LIMIT: 4,
	SENDCHANNEL_REQUIRE_LOGIN: 5,
	SENDCHANNEL_REQUIRE_PASSWORD: 6,
	SENDCHANNEL_REQUIRE_PERMISSION: 7
};

/**
 * @enum {number}
 */
proto.v1.SendPeerMessageStatusEnum = {
	SENDPEER_RECEIVER_NOTFOUND: 0,
	SENDPEER_SUCCESSFUL: 1,
	SENDPEER_FAILED: 2,
	SENDPEER_IGNORE: 3,
	SENDPEER_UNREACHABLE: 4
};

/**
 * @enum {number}
 */
proto.v1.ReleaseChannelStatusEnum = {
	RELEASE_CHANNEL_NOTFOUND: 0,
	RELEASE_CHANNEL_SUCCESSFUL: 1,
	RELEASE_CHANNEL_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.AdminActionChannelStatusEnum = {
	ADMINACTION_UNKNOW: 0,
	ADMINACTION_SUCCESSFUL: 1,
	ADMINACTION_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.PeerToPeerActionStatusEnum = {
	PEERTOPEER_ACTION_UNKNOW: 0,
	PEERTOPEER_ACTION_SUCCESSFUL: 1,
	PEERTOPEER_ACTION_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.LogInStatusEnum = {
	LOGIN_UNKNOW: 0,
	LOGIN_SUCCESSFUL: 1,
	LOGIN_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.LogOutStatusEnum = {
	LOGOUT_UNKNOW: 0,
	LOGOUT_SUCCESSFUL: 1,
	LOGOUT_FAILED: 2
};

/**
 * @enum {number}
 */
proto.v1.UploadChatFileToS3StatusEnum = {
	UPLOAD_UNKNOWN_CHANNEL: 0,
	UPLOAD_SUCCESSFUL: 1,
	UPLOAD_S3_DOMAIN_NOTFOUND: 2,
	UPLOAD_S3_ACCESSKEY_INVALID: 3,
	UPLOAD_S3_FOLDER_NOTFOUND: 4,
	UPLOAD_S3_FILENAME_INVALID: 5
};

goog.object.extend(exports, proto.v1);
